Author: Yuancheng Zhu

This is a 2-part analysis. In the first part, I answer a series of questions that help profile and understand the data, which focus on different aspects. 

In the second part of the analysis, I come up with my own inferences and analysis of the data for a particular research question I am interested in. I also provide a SQL query to retrieve the data I need for this research question.

Notes: An ER Diagram is provided separately in the Repository: Yelp-Data-Analysis-Using-SQL.




Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	
Count the total number of records for each table (including NULL value)

SELECT COUNT(*) AS 
total_number_of_records
FROM attribute;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM Business;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM Category;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM Checkin;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM elite_years;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM friend;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM hours;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM photo;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM review;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM tip;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

SELECT COUNT(*) AS 
total_number_of_records
FROM user;

+-------------------------+
| total_number_of_records |
+-------------------------+
|                   10000 |
+-------------------------+

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

Comments: The question asked is confusing. For example, if you want to calcuate the total distinct records in hours table, the correct query should be like below (Query example) because one business has different operation values records for different days. However, according to the question, it only cares about distinct number of keys. Below I will write queries based on the question's requirement (Formal answer). 

Query example:

SELECT business_id, hours, COUNT (*) AS
total_disctinct_number_of_records
FROM Hours
GROUP BY business_id, hours

+------------------------+-----------------------+-----------------------------------+
| business_id            | hours                 | total_disctinct_number_of_records |
+------------------------+-----------------------+-----------------------------------+
| -0DET7VdEQOJVJ_v6klEug | Friday|12:00-23:00    |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Monday|12:00-23:00    |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Saturday|12:00-23:00  |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Sunday|12:00-23:00    |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Thursday|12:00-23:00  |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Tuesday|12:00-23:00   |                                 1 |
| -0DET7VdEQOJVJ_v6klEug | Wednesday|12:00-23:00 |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Friday|9:00-19:00     |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Monday|9:00-19:00     |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Saturday|9:00-17:00   |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Thursday|9:00-19:00   |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Tuesday|9:00-19:00    |                                 1 |
| -2HjuT4yjLZ3b5f_abD87Q | Wednesday|9:00-19:00  |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Friday|11:00-22:00    |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Monday|11:00-21:00    |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Saturday|11:00-22:00  |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Sunday|11:00-21:00    |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Thursday|11:00-21:00  |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Tuesday|11:00-21:00   |                                 1 |
| -3oxnPPPU3YoxO9M1I2idg | Wednesday|11:00-21:00 |                                 1 |
| -9y2L9qSbqukVl8LzEOGdg | Friday|10:00-16:00    |                                 1 |
| -9y2L9qSbqukVl8LzEOGdg | Monday|10:00-16:00    |                                 1 |
| -9y2L9qSbqukVl8LzEOGdg | Saturday|10:00-16:00  |                                 1 |
| -9y2L9qSbqukVl8LzEOGdg | Thursday|10:00-19:00  |                                 1 |
| -9y2L9qSbqukVl8LzEOGdg | Tuesday|10:00-19:00   |                                 1 |
+------------------------+-----------------------+-----------------------------------+
(Output limit exceeded, 25 of 10000 total rows shown)

Formal answer:

SELECT COUNT(DISTINCT id) AS 
total_disctinct_number_of_records
FROM business;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                             10000 |
+-----------------------------------+


SELECT COUNT(DISTINCT business_id) AS 
total_disctinct_number_of_records
FROM Hours;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                              1562 |
+-----------------------------------+


SELECT COUNT(DISTINCT business_id) AS 
total_disctinct_number_of_records
FROM category;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                              2643 |
+-----------------------------------+

SELECT COUNT(DISTINCT business_id) AS 
total_disctinct_number_of_records
FROM attribute;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                              1115 |
+-----------------------------------+

SELECT COUNT(DISTINCT id) AS 
total_disctinct_number_of_records
FROM review;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                             10000 |
+-----------------------------------+

SELECT COUNT(DISTINCT business_id) AS 
total_disctinct_number_of_records
FROM checkin;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                               493 |
+-----------------------------------+

SELECT COUNT(DISTINCT id) AS 
total_disctinct_number_of_records
FROM Photo;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                             10000 |
+-----------------------------------+

SELECT COUNT(DISTINCT user_id) AS 
total_disctinct_number_of_records
FROM Tip;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                               537 |
+-----------------------------------+

SELECT COUNT(DISTINCT id) AS 
total_disctinct_number_of_records
FROM user;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                             10000 |
+-----------------------------------+

SELECT COUNT(DISTINCT user_id) AS 
total_disctinct_number_of_records
FROM friend;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                                11 |
+-----------------------------------+

SELECT COUNT(DISTINCT user_id) AS 
total_disctinct_number_of_records
FROM elite_years;

+-----------------------------------+
| total_disctinct_number_of_records |
+-----------------------------------+
|                              2780 |
+-----------------------------------+

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

SELECT *
FROM user
WHERE id = NULL OR name = NULL OR review_count = NULL OR yelping_since = NULL 
OR useful = NULL OR funny = NULL OR cool = NULL OR fans = NULL 
OR average_stars = NULL OR compliment_hot = NULL OR compliment_more = NULL 
OR compliment_profile = NULL OR compliment_cute = NULL OR compliment_list = NULL 
OR compliment_note = NULL OR compliment_plain = NULL OR compliment_cool = NULL 
OR compliment_funny = NULL OR compliment_writer = NULL 
OR compliment_photos = NULL;
	
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
| id | name | review_count | yelping_since | useful | funny | cool | fans | average_stars | compliment_hot | compliment_more | compliment_profile | compliment_cute | compliment_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | compliment_photos |
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
(Zero rows)

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995

		
Queries and results:

SELECT MIN(stars), MAX(stars), AVG(stars)
FROM review;

+------------+------------+------------+
| MIN(stars) | MAX(stars) | AVG(stars) |
+------------+------------+------------+
|          1 |          5 |     3.7082 |
+------------+------------+------------+

SELECT MIN(stars), MAX(stars), AVG(stars)
FROM business;

+------------+------------+------------+
| MIN(stars) | MAX(stars) | AVG(stars) |
+------------+------------+------------+
|        1.0 |        5.0 |     3.6549 |
+------------+------------+------------+

SELECT MIN(likes), MAX(likes), AVG(likes)
FROM tip;

+------------+------------+------------+
| MIN(likes) | MAX(likes) | AVG(likes) |
+------------+------------+------------+
|          0 |          2 |     0.0144 |
+------------+------------+------------+

SELECT MIN(count), MAX(count), AVG(count)
FROM checkin;

+------------+------------+------------+
| MIN(count) | MAX(count) | AVG(count) |
+------------+------------+------------+
|          1 |         53 |     1.9414 |
+------------+------------+------------+

SELECT MIN(review_count), MAX(review_count), AVG(review_count)
FROM User;
+-------------------+-------------------+-------------------+
| MIN(review_count) | MAX(review_count) | AVG(review_count) |
+-------------------+-------------------+-------------------+
|                 0 |              2000 |           24.2995 |
+-------------------+-------------------+-------------------+

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city, SUM(review_count) AS reviews_number
FROM business
GROUP BY city
ORDER BY reviews_number DESC;	
	
	Copy and Paste the Result Below:

Las Vegas has the most reviews.	
+-----------------+----------------+
| city            | reviews_number |
+-----------------+----------------+
| Las Vegas       |          82854 |
| Phoenix         |          34503 |
| Toronto         |          24113 |
| Scottsdale      |          20614 |
| Charlotte       |          12523 |
| Henderson       |          10871 |
| Tempe           |          10504 |
| Pittsburgh      |           9798 |
| Montréal        |           9448 |
| Chandler        |           8112 |
| Mesa            |           6875 |
| Gilbert         |           6380 |
| Cleveland       |           5593 |
| Madison         |           5265 |
| Glendale        |           4406 |
| Mississauga     |           3814 |
| Edinburgh       |           2792 |
| Peoria          |           2624 |
| North Las Vegas |           2438 |
| Markham         |           2352 |
| Champaign       |           2029 |
| Stuttgart       |           1849 |
| Surprise        |           1520 |
| Lakewood        |           1465 |
| Goodyear        |           1155 |
+-----------------+----------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT city, stars, COUNT(stars) AS number_of_business
FROM business
WHERE city = 'Avon'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+------+-------+--------------------+
| city | stars | number_of_business |
+------+-------+--------------------+
| Avon |   1.5 |                  1 |
| Avon |   2.5 |                  2 |
| Avon |   3.5 |                  3 |
| Avon |   4.0 |                  2 |
| Avon |   4.5 |                  1 |
| Avon |   5.0 |                  1 |
+------+-------+--------------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT city, stars, COUNT(stars) AS number_of_business
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-----------+-------+--------------------+
| city      | stars | number_of_business |
+-----------+-------+--------------------+
| Beachwood |   2.0 |                  1 |
| Beachwood |   2.5 |                  1 |
| Beachwood |   3.0 |                  2 |
| Beachwood |   3.5 |                  2 |
| Beachwood |   4.0 |                  1 |
| Beachwood |   4.5 |                  2 |
| Beachwood |   5.0 |                  5 |
+-----------+-------+--------------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id, name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;	
		
	Copy and Paste the Result Below:
		
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
No. From the query result below, we can find that users with more reviews don't always have more fans. For example, Gerald, who has twice as many reviews as Mimi does, only has half of the number of fans as Mimi does.

SELECT name, review_count, fans
FROM user
ORDER BY review_count DESC;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
Yes, we can see there are 1780 reviews contain the word "love" while only 232 reviews contain the word "hate".
	
	SQL code used to arrive at answer:

SELECT COUNT(*) AS love_review_count
FROM review 
WHERE text LIKE '%love%';

+-------------------+
| love_review_count |
+-------------------+
|              1780 |
+-------------------+

SELECT COUNT(*) AS love_review_count
FROM review 
WHERE text LIKE '%hate%';

+-------------------+
| love_review_count |
+-------------------+
|               232 |
+-------------------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT id, name, fans
FROM user
ORDER BY fans DESC
LIMIT 10;	
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, lower rating restaurant operates differently on Sunday from the higher rating restaurant and we can even find a higher rating Japanese restaurant in Toronoto has no operation hours information.

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, obviously from the results show below we can find that restaurants with a higher rating have a larger number of reviews than the lower rating restaurant does.         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No. These Japanese restaurants are very close to each other.

SQL code used for analysis:

Take a glance at the pair of city and category:		

SELECT city, category, COUNT(*)
FROM business INNER JOIN category
ON business.id = category.business_id
GROUP BY city, category
ORDER BY COUNT(*) DESC	

+-------------+------------------------+----------+
| city        | category               | COUNT(*) |
+-------------+------------------------+----------+
| Toronto     | Restaurants            |       10 |
| Phoenix     | Restaurants            |        6 |
| Chandler    | Shopping               |        4 |
| Las Vegas   | Health & Medical       |        4 |
| Las Vegas   | Restaurants            |        4 |
| Las Vegas   | Shopping               |        4 |
| Mississauga | Restaurants            |        4 |
| Phoenix     | Food                   |        4 |
| Phoenix     | Home Services          |        4 |
| Toronto     | Bars                   |        4 |
| Toronto     | Food                   |        4 |
| Toronto     | Nightlife              |        4 |
| Toronto     | Shopping               |        4 |
| Charlotte   | Shopping               |        3 |
| Cleveland   | Food                   |        3 |
| Edinburgh   | Restaurants            |        3 |
| Phoenix     | American (Traditional) |        3 |
| Phoenix     | Health & Medical       |        3 |
| Toronto     | Active Life            |        3 |
| Toronto     | Beauty & Spas          |        3 |
| Toronto     | Japanese               |        3 |
| Toronto     | Pubs                   |        3 |
| Toronto     | Sushi Bars             |        3 |
| Chandler    | Auto Repair            |        2 |
| Chandler    | Automotive             |        2 |
+-------------+------------------------+----------+
(Output limit exceeded, 25 of 586 total rows shown)

I pick the city of "Toronto" and the category of "Japanese".

i.distribution of hours:

SELECT B.city, C.category, B.stars, H.hours,
CASE
    WHEN stars BETWEEN 2 AND 3 THEN 'lower rating'
    WHEN stars BETWEEN 4 AND 5 THEN 'Higher rating'
    ELSE 'Other'
END AS star_rating    
FROM (business AS B LEFT JOIN hours AS H
ON B.id = H.business_id) LEFT JOIN category AS C 
ON B.id = C.business_id
WHERE B.city = 'Toronto'
AND C.category = 'Japanese'
ORDER BY star_rating

+---------+----------+-------+-----------------------+---------------+
| city    | category | stars | hours                 | star_rating   |
+---------+----------+-------+-----------------------+---------------+
| Toronto | Japanese |   4.5 | Monday|11:00-23:00    | Higher rating |
| Toronto | Japanese |   4.5 | Tuesday|11:00-23:00   | Higher rating |
| Toronto | Japanese |   4.5 | Friday|11:00-23:00    | Higher rating |
| Toronto | Japanese |   4.5 | Wednesday|11:00-23:00 | Higher rating |
| Toronto | Japanese |   4.5 | Thursday|11:00-23:00  | Higher rating |
| Toronto | Japanese |   4.5 | Sunday|14:00-23:00    | Higher rating |
| Toronto | Japanese |   4.5 | Saturday|11:00-23:00  | Higher rating |
| Toronto | Japanese |   4.0 | None                  | Higher rating |
| Toronto | Japanese |   2.0 | Monday|11:00-23:00    | lower rating  |
| Toronto | Japanese |   2.0 | Tuesday|11:00-23:00   | lower rating  |
| Toronto | Japanese |   2.0 | Friday|11:00-23:00    | lower rating  |
| Toronto | Japanese |   2.0 | Wednesday|11:00-23:00 | lower rating  |
| Toronto | Japanese |   2.0 | Thursday|11:00-23:00  | lower rating  |
| Toronto | Japanese |   2.0 | Sunday|11:00-23:00    | lower rating  |
| Toronto | Japanese |   2.0 | Saturday|11:00-23:00  | lower rating  |
+---------+----------+-------+-----------------------+---------------+

ii.number of reviews

SELECT B.city, C.category, B.stars, B.review_count,
CASE
    WHEN stars BETWEEN 2 AND 3 THEN 'lower rating'
    WHEN stars BETWEEN 4 AND 5 THEN 'Higher rating'
    ELSE 'Other'
END AS star_rating    
FROM business AS B LEFT JOIN category AS C 
ON B.id = C.business_id
WHERE B.city = 'Toronto'
AND C.category = 'Japanese'
ORDER BY star_rating

+---------+----------+-------+--------------+---------------+
| city    | category | stars | review_count | star_rating   |
+---------+----------+-------+--------------+---------------+
| Toronto | Japanese |   4.5 |            8 | Higher rating |
| Toronto | Japanese |   4.0 |           75 | Higher rating |
| Toronto | Japanese |   2.0 |            5 | lower rating  |
+---------+----------+-------+--------------+---------------+

iii. location

SELECT B.city, C.category, B.stars, B.latitude, B.longitude,
CASE
    WHEN stars BETWEEN 2 AND 3 THEN 'lower rating'
    WHEN stars BETWEEN 4 AND 5 THEN 'Higher rating'
    ELSE 'Other'
END AS star_rating    
FROM business AS B LEFT JOIN category AS C 
ON B.id = C.business_id
WHERE B.city = 'Toronto'
AND C.category = 'Japanese'
ORDER BY star_rating

+---------+----------+-------+----------+-----------+---------------+
| city    | category | stars | latitude | longitude | star_rating   |
+---------+----------+-------+----------+-----------+---------------+
| Toronto | Japanese |   4.5 |  43.6452 |  -79.5324 | Higher rating |
| Toronto | Japanese |   4.0 |  43.7766 |  -79.4142 | Higher rating |
| Toronto | Japanese |   2.0 |  43.6614 |   -79.379 | lower rating  |
+---------+----------+-------+----------+-----------+---------------+

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: number of reviews

Business that are still open have a higher average number of reviews than business that are closed do.         
         
ii. Difference 2: ratings

Business that are still open have a slightly higher average ratings than business that are closed do.
         
         
         
SQL code used for analysis:

SELECT is_open, COUNT(*), AVG(review_count), AVG(stars)  
FROM business
GROUP BY is_open	

+---------+----------+-------------------+---------------+
| is_open | COUNT(*) | AVG(review_count) |    AVG(stars) |
+---------+----------+-------------------+---------------+
|       0 |     1520 |     23.1980263158 | 3.52039473684 |
|       1 |     8480 |     31.7570754717 | 3.67900943396 |
+---------+----------+-------------------+---------------+

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
From the ER diagram, I find that on YELP, users can write tips, which are shorter than reviews and tend to convey quick suggestions. It is not surprise that users may use tips as short reviews about their feelings. In addition, users can also choose to "like" the business. Here, I want to examine the relationship among the number of reviews, ratings, number of short reviews and likes as a preliminary analysis, which may give insights about whether tip is a more important indicator of the quality or reputation of the business.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I will collect the average ratings, number of reviews, number of tips and likes of each business.                           
                  
iii. Output of your finished dataset:

+------------------------+----------------------------------------+--------------+-------+---------------+--------------+
| id                     | name                                   | review_count | stars | COUNT(T.text) | SUM(T.likes) |
+------------------------+----------------------------------------+--------------+-------+---------------+--------------+
| 08t3_HjbpLyPeuft6eoa5A | Page Dairy Mart                        |          118 |   4.5 |            36 |            1 |
| 0PVxodALQu-soL5J8bjerQ | Ritters Diner                          |          182 |   3.5 |            21 |            1 |
| -igpUhnA1b5iUK6rfAtuPw | Oakmont Bakery                         |          197 |   4.5 |            17 |            1 |
| 01I5pFCvJrrGuY3A-KoNIA | Namaste India                          |           39 |   3.0 |            17 |            0 |
| 1GaooxqCWHzulI2Ub3CXEw | Mad Mex - South Hills                  |          103 |   3.0 |            17 |            0 |
| 1hqOjPxgH8IXE4bNq6DFiw | Wings Suds & Spuds                     |           80 |   3.5 |            13 |            0 |
| 1Z4_zSITNVQ_Bt027R0S1g | Robbie Fox's Public House              |          126 |   3.5 |            11 |            0 |
| 1ZDGpyCKBX-VvuO0Vl2tww | Planet Fitness - Pittsburgh - Edgewood |           31 |   3.5 |            11 |            0 |
| 0PCBt3JKD6IooicImKNBzA | Nicky's Thai Kitchen                   |          429 |   4.0 |            10 |            0 |
| 04kZ5CSh6oKhI5huU5bLdg | Bistro Penn                            |          242 |   3.5 |             9 |            0 |
| 28exW1xiocTHiJIkVY2A9g | Kennywood Park                         |          158 |   4.0 |             9 |            0 |
| -7H-oXvCxJzuT42ky6Db0g | Industry Public House                  |          436 |   3.5 |             8 |            0 |
| 1cGyzWtfOoDiE8V0OR85yA | Crepes Parisiennes                     |          124 |   4.0 |             8 |            0 |
| 1d-gQ3bl4jy6CH6tpIM6ZQ | GetGo Fuel Station                     |            6 |   3.5 |             8 |            0 |
| 1dYpffQi3qdh-dkXF4LZBw | Burgatory                              |          239 |   4.0 |             8 |            0 |
| 1oxMj71XiKQjCbRxECzB7w | Cathedral of Learning                  |           89 |   4.5 |             8 |            1 |
| 1uvcySLWM75MzlLM12F8dA | Pennsylvania Macaroni Co               |          165 |   4.5 |             8 |            0 |
| 22u7wqu4vRRDi2zXw_dTRQ | Sinful Sweets Chocolate Company        |           81 |   4.0 |             8 |            0 |
| 1LUaZFVMEjodl1tbAGF3sQ | Andy's Sushi Bar                       |           55 |   4.0 |             7 |            0 |
| 1eJ7yIzSAjwC145fnHD5Xw | Starbucks                              |           22 |   3.0 |             7 |            0 |
| 2eVpkjDioFSgp2C27mSdHQ | City Theatre Company                   |           15 |   4.0 |             7 |            0 |
| -HeqTxBMPTi3A7QuU5PvgQ | Senator John Heinz History Center      |           98 |   4.5 |             6 |            0 |
| -httBl6DSZiUtDX4SQWtag | The Enrico Biscotti                    |          142 |   4.0 |             6 |            0 |
| 0IhSOm9Vm1JkvRO6XyElGg | Cafe At the Lofts                      |            9 |   4.0 |             6 |            0 |
| 1DSEqxx6wxF2zwpPDBwtOg | Sugar Cafe                             |           40 |   4.5 |             6 |            0 |
+------------------------+----------------------------------------+--------------+-------+---------------+--------------+
(Output limit exceeded, 25 of 10000 total rows shown)         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT B.id, B.name, B.review_count, B.stars,
COUNT(T.text), SUM(T.likes)
FROM business AS B LEFT JOIN tip AS T
ON B.id = T.business_id
GROUP BY B.id
ORDER BY COUNT(T.text) DESC
